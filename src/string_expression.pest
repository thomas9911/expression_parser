calculation = _{ SOI ~ expr ~ EOI }

num = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
    int = { ("+" | "-")? ~ ASCII_DIGIT+ }

var = { (ASCII_ALPHANUMERIC | ":" | "_" )+ }

// string  = @{ "\"" ~ inner ~ "\"" }
//     inner   = { (!("\"" | "\\") ~ ANY)* ~ (escape ~ inner)? }
//     escape  = { "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | unicode) }
//     unicode = { "u" ~ ASCII_HEX_DIGIT{4} }

string  = @{ "\"" ~ letters ~ "\"" }
    letters = @{ (!("\"" | "\\") ~ char)* }
    char = _{ PUNCTUATION | LETTER | NUMBER }

operation = _{ string_operation | binary_operation | number_operation}

string_operation = _{ concat_op }
    concat_op = { "++" }

binary_operation = _{ equal | not_equal | and | or }
    equal     = { "==" }
    not_equal = { "!=" }
    and       = { "&" | "&&" |"and" }
    or        = { "|" | "||" | "or" }

number_operation = _{ power | add | subtract | multiply | divide }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    power    = { "^" | "**" }

expr = { term ~ (operation ~ term)* }

func = _{string_functions | number_functions}
    one_argument = _{ expr }
    two_arguments = _{expr ~ COMMA ~ expr}
    any_arguments = _{ one_or_more_arguments? }
    one_or_more_arguments = _{ expr ~ (COMMA ~ expr)* }

string_functions = _{ upper | concat | trim | contains}
    concat = { "concat(" ~ one_or_more_arguments ~ ")" }
    trim = { "trim(" ~ two_arguments ~ ")" }
    contains = { "contains(" ~ two_arguments ~ ")" }
    upper = { "upper(" ~ one_argument ~ ")" }

number_functions = _{ sin | cos | tan }
    sin = { "sin(" ~ one_argument ~ ")" }
    cos = { "cos(" ~ one_argument ~ ")" }
    tan = { "tan(" ~ one_argument ~ ")" }

list = { "[" ~ any_arguments ~ "]"}

term = _{ num | "(" ~ expr ~ ")" | string | func | var | list}

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMA = _{","}